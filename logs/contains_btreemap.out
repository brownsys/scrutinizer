[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(5:2515 ~ alloc[d541]::collections::btree::node::{impl#18}::into_leaf),
    arg_tys: [
        alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Immut<'_>, K, V, Type>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/collections/btree/node.rs:385:25: 385:36 (#0),
    body_span: Some(
        /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/collections/btree/node.rs:377:5: 381:6 (#0),
    ),
    body_checked: true,
    raw_ptr_deref: true,
}
[src/fn_visitor.rs:124] body_snippet = "fn into_leaf(self) -> &'a LeafNode<K, V> {\n        let ptr = Self::as_leaf_ptr(&self);\n        // SAFETY: there can be no mutable references into this tree borrowed as `Immut`.\n        unsafe { &*ptr }\n    }"
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1260 ~ core[f767]::intrinsics::{extern#0}::caller_location),
    arg_tys: [],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic/location.rs:88:9: 88:45 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:8282 ~ core[f767]::panicking::panic_fmt::{extern#0}::panic_impl),
    arg_tys: [
        &std::panic::PanicInfo<'_>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panicking.rs:67:14: 67:29 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:8285 ~ core[f767]::panicking::panic_nounwind_fmt::{extern#0}::panic_impl),
    arg_tys: [
        &std::panic::PanicInfo<'_>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panicking.rs:96:14: 96:29 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1377 ~ core[f767]::intrinsics::{extern#0}::unchecked_sub),
    arg_tys: [
        usize,
        usize,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/index.rs:386:27: 386:62 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1268 ~ core[f767]::intrinsics::{extern#0}::offset),
    arg_tys: [
        *const T,
        isize,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ptr/const_ptr.rs:465:18: 465:49 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1270 ~ core[f767]::intrinsics::{extern#0}::arith_offset),
    arg_tys: [
        *const T,
        isize,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ptr/const_ptr.rs:545:18: 545:55 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(5:2488 ~ alloc[d541]::collections::btree::node::{impl#15}::len),
    arg_tys: [
        &alloc::collections::btree::node::NodeRef<BorrowType, K, V, NodeType>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/collections/btree/node.rs:844:35: 844:40 (#0),
    body_span: Some(
        /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/collections/btree/node.rs:277:5: 281:6 (#0),
    ),
    body_checked: true,
    raw_ptr_deref: true,
}
[src/fn_visitor.rs:124] body_snippet = "pub fn len(&self) -> usize {\n        // Crucially, we only access the `len` field here. If BorrowType is marker::ValMut,\n        // there might be outstanding mutable references to values that we must not invalidate.\n        unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }\n    }"
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(5:2741 ~ alloc[d541]::collections::btree::node::{impl#52}::descend),
    arg_tys: [
        alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<BorrowType, K, V, alloc::collections::btree::node::marker::Internal>, alloc::collections::btree::node::marker::Edge>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/collections/btree/search.rs:61:52: 61:61 (#0),
    body_span: Some(
        /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/collections/btree/node.rs:1064:5: 1079:6 (#0),
    ),
    body_checked: true,
    raw_ptr_deref: true,
}
[src/fn_visitor.rs:124] body_snippet = "pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n        const {\n            assert!(BorrowType::TRAVERSAL_PERMIT);\n        }\n\n        // We need to use raw pointers to nodes because, if BorrowType is\n        // marker::ValMut, there might be outstanding mutable references to\n        // values that we must not invalidate. There's no worry accessing the\n        // height field because that value is copied. Beware that, once the\n        // node pointer is dereferenced, we access the edges array with a\n        // reference (Rust issue #73987) and invalidate any other references\n        // to or inside the array, should any be around.\n        let parent_ptr = NodeRef::as_internal_ptr(&self.node);\n        let node = unsafe { (*parent_ptr).edges.get_unchecked(self.idx).assume_init_read() };\n        NodeRef { node, height: self.node.height - 1, _marker: PhantomData }\n    }"
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1254 ~ core[f767]::intrinsics::{extern#0}::assert_inhabited),
    arg_tys: [],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/maybe_uninit.rs:696:13: 696:48 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1345 ~ core[f767]::intrinsics::{extern#0}::ctpop),
    arg_tys: [
        u64,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs:107:13: 107:48 (#79),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
Body purity check result for function contains_btreemap: false