[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:10782 ~ core[f767]::slice::raw::from_raw_parts),
    arg_tys: [
        *const T,
        usize,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2628:18: 2628:64 (#0),
    body_span: Some(
        /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/raw.rs:92:1: 102:2 (#0),
    ),
    body_checked: true,
    raw_ptr_deref: true,
}
[src/fn_visitor.rs:124] body_snippet = "pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n    unsafe {\n        assert_unsafe_precondition!(\n            \"slice::from_raw_parts requires the pointer to be aligned and non-null, and the total size of the slice not to exceed `isize::MAX`\",\n            [T](data: *const T, len: usize) => is_aligned_and_not_null(data)\n                && is_valid_allocation_size::<T>(len)\n        );\n        &*ptr::slice_from_raw_parts(data, len)\n    }\n}"
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1345 ~ core[f767]::intrinsics::{extern#0}::ctpop),
    arg_tys: [
        u64,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs:107:13: 107:48 (#28),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1260 ~ core[f767]::intrinsics::{extern#0}::caller_location),
    arg_tys: [],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panic/location.rs:88:9: 88:45 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:8282 ~ core[f767]::panicking::panic_fmt::{extern#0}::panic_impl),
    arg_tys: [
        &std::panic::PanicInfo<'_>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panicking.rs:67:14: 67:29 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:8285 ~ core[f767]::panicking::panic_nounwind_fmt::{extern#0}::panic_impl),
    arg_tys: [
        &std::panic::PanicInfo<'_>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/panicking.rs:96:14: 96:29 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1270 ~ core[f767]::intrinsics::{extern#0}::arith_offset),
    arg_tys: [
        *const T,
        isize,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ptr/const_ptr.rs:545:18: 545:55 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:1268 ~ core[f767]::intrinsics::{extern#0}::offset),
    arg_tys: [
        *const T,
        isize,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ptr/const_ptr.rs:465:18: 465:49 (#0),
    body_span: None,
    body_checked: false,
    raw_ptr_deref: false,
}
[src/fn_visitor.rs:116] fn_call = FnCallInfo {
    def_id: DefId(2:35944 ~ core[f767]::slice::iter::{impl#181}::next),
    arg_tys: [
        &mut std::slice::Iter<'_, T>,
    ],
    call_span: /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs:231:42: 231:48 (#38),
    body_span: Some(
        /Users/artemagvanian/.rustup/toolchains/nightly-2023-04-12-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs:124:13: 142:14 (#38),
    ),
    body_checked: true,
    raw_ptr_deref: true,
}
[src/fn_visitor.rs:124] body_snippet = "fn next(&mut self) -> Option<$elem> {\n                // could be implemented with slices, but this avoids bounds checks\n\n                // SAFETY: `assume` calls are safe since a slice's start pointer\n                // must be non-null, and slices over non-ZSTs must also have a\n                // non-null end pointer. The call to `next_unchecked!` is safe\n                // since we check if the iterator is empty first.\n                unsafe {\n                    assume(!self.ptr.as_ptr().is_null());\n                    if !<T>::IS_ZST {\n                        assume(!self.end.is_null());\n                    }\n                    if is_empty!(self) {\n                        None\n                    } else {\n                        Some(next_unchecked!(self))\n                    }\n                }\n            }"
Body purity check result for function contains_vec: false